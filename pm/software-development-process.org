
* 写在前面
在软件开发行业断断续续干了10多年，随着时间的推移之前很多不理解的概念及流程慢慢的在实战中理解的更透彻了，但是随着年龄的增长我也开始慢慢迷茫起来，35了，后面还要继续搞研发么，还是转型或者是自己创业？来自家庭和事业的各方面压力向我扑面而来。目前我还没决定好该何去何从，暂且把这么多年的经历总结一下吧，有还没吃透的地方利用春节前这几个月把他吃透，然后再做决定。

* 我们就从软件开发的生命周期(SDLC)开始吧，并且假定战略层面已经决定要启动项目

** 构思和头脑风暴(Ideation)
为产品或服务创建一个全面的愿景或目标。最有效的方式是组织头脑风暴会议或构思研讨会。目标是深入了解产品旨在为用户提供什么，它将如何满足市场需求，以及您计划如何从竞争中脱颖而出。如果非产品类项目，或者是已确定的目标明确的业务系统则可以直接进入下一个阶段。根据头脑风暴梳理出思维导图（输出：《思维导图》）

** 可行性分析(Feasibility Analysis)
通过上一个阶段，已经确认要做的产品或者业务系统的目标是什么了。可以进行可行性分析了，可行性包含：技术可行性、运营可行性、法律可行性等方面。可行性分析是对技术和业务因素的全面研究，这些因素都会影响您的软件开发项目的结果，它包括预期的产品发布截止日期（项目周期）、软件开发预算、关键项目里程碑和估计的投资回报率等方面。相关人员必须尽量确保已经涵盖了产品开发的所有方面。（输出：《可行性分析报告》）

** 需求收集(Requirements Gathering & Planning)
收集来自客户和用户的所有信息以创建需求文档，以便开发团队了解他们正在构建的内容，然后进行项目规划，其中包括——跨团队分配工作、设置里程碑、创建交付时间表、获取成本估算、进行风险分析以及制定降低风险的计划。（输出：《软件需求规范文档》/《SRS:Software Requirements Specification》）

** 设计(Design)
软件开发生命周期的这一阶段侧重于创建软件架构、原型和用户体验设计。以下概述了这些活动的含义：
1. 软件架构：指在软件代码中创建有组织的元素流，以保证质量、清晰度和可访问性。
2. 原型：UI/UX 团队构建软件的原型版本，以验证其外观和设计元素流程。它让开发团队和利益相关者可视化软件的整体外观
   wireframe/mockup/prototype
