* Software Engineering | Classical Waterfall Model（理想化的瀑布模型，其他模型的基础）

** 1)可行性研究(Feasibility Study):
此阶段的主要目标是确定开发软件在财务和技术上是否可行。 可行性研究涉及了解问题，然后确定解决问题的各种可能策略。这些不同的已识别解决方案根据其优缺点进行分析，选择最佳解决方案，并根据此解决方案策略执行所有其他阶段。

** 2)需求分析和需求规格(Requirements analysis and specification)
需求分析和需求规格阶段的目的是了解客户的确切需求并正确记录它们。这个阶段包括下面两个不同的活动：

*** 需求收集与分析(Requirement gathering and analysis)
首先从客户那里收集有关软件的所有需求，然后分析收集到的需求。分析部分的目标是消除不完整（不完整的需求是省略了实际需求的某些部分）和不一致（不一致性需求是需求的某些部分与其他部分相矛盾）。

*** 需求规格(Requirement specification)
这些分析的需求记录在软件需求规格说明(SRS)文档中。SRS文档充当开发团队与客户之间的合同。客户和开发商之间的任何未来争议都可以通过检查SRS文件来解决。

** 3)设计(Design)
设计阶段的目标是将SRS文档中指定的需求转换为适合用某种编程语言实现的结构。

*** 系统设计(System Design)

*** 架构设计(Architectural Design)

*** 模块设计(Module Design)

** 4)编码和单元测试(Coding and Unit testing)
在编码阶段，使用任何合适的编程语言将软件设计翻译成源代码。因此，每个设计的模块都被编码。单元测试阶段的目的是检查每个模块是否正常工作。

** 5)集成和系统测试(Integration and System testing)
编码和单元测试后将不同模块的集成在一起。各种模块的集成是通过多个步骤逐步进行的。在每个集成步骤中，将先前计划的模块添加到部分集成的系统中，并对最终系统进行测试。最后，在所有模块成功集成和测试后，得到完整的工作系统，并在此基础上进行系统测试。系统测试包括三种不同类型的测试活动，如下所述：

*** 内测(Alpha Testing):内测是由开发团队进行的系统测试。

*** 公测(Beta testing):公测是由开发团队进行的系统测试。

*** 验收测试(Acceptance testing):软件交付后，客户进行验收测试，以确定是接受还是拒绝交付的软件。

** 6)维护(Maintenance)
维护是软件生命周期中最重要的阶段。用于维护的工作量占开发完整软件总工作量的 60%。基本上有三种类型的维护：

*** 修复/纠错性维护(Corrective Maintenance):执行此类维护是为了纠正在产品开发阶段未发现的错误。

*** 完善/增强性维护(Perfective Maintenance):进行此类维护是为了根据客户的要求增强系统的功能。

*** 适应性维护(Adaptive Maintenance):将软件移植到新环境（例如在新计算机平台上工作或使用新操作系统）通常需要适应新环境的维护。
